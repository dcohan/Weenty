@model Cuponera.Entities.product

@{
    ViewBag.Title = "Editar";
}

<h2>Editar</h2>


@Scripts.Render("~/bundles/globalization")
@Scripts.Render("~/bundles/globalization_ar")
@Scripts.Render("~/bundles/imagesUploader")

<script type="text/javascript">
    var images = {
        multiple: true,
        container_id: 'images'
    };

    var images_to_remove = [];

    $(function () {
        $('.delete-icon').click(function () {
            var $container = $(this).closest('.image-container');
            var id_image = $container.data('id-image');
            images_to_remove.push(id_image);


            $container.remove();
            $('#imagesToRemove').val(images_to_remove.join(','));
        });

        $.validator.methods.date = function (value, element) {
                Globalize.culture("es-AR");
                // you can alternatively pass the culture to parseDate instead of
                // setting the culture above, like so:
                // parseDate(value, null, "en-AU")
                return this.optional(element) || Globalize.parseDate(value) !== null;
        }

        $(".date-picker").removeClass('input-validation-error');
        $(".date-picker").datepicker({
            dateFormat: "dd/mm/yy"
        });

        document.getElementsByClassName('hidden');
        $(".hidden").removeClass('input-validation-error');

    });
</script>

@using (Html.BeginForm("Edit", "product", FormMethod.Post, new { enctype = "multipart/form-data", id = "frmID" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Producto</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.IdProduct)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, "Nombre", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, "Descripción", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, "Precio", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IdCategory, "Categoria", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdCategory")
                @Html.ValidationMessageFor(model => model.IdCategory, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IdStore, "Sucursal", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdStore", String.Empty)
                @Html.ValidationMessageFor(model => model.IdStore, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDatetime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDatetime, new { htmlAttributes = new { @class = "form-control, date-picker" } })
                @Html.ValidationMessageFor(model => model.StartDatetime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpirationDatetime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExpirationDatetime, new { htmlAttributes = new { @class = "form-control, date-picker" } })
                @Html.ValidationMessage("Date")
                @Html.ValidationMessageFor(model => model.ExpirationDatetime, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-10">
                <span>Imágenes</span>
                <div class="images-container">
                    <div class="image-container" data-id-image="main">
                        @if (!string.IsNullOrEmpty(Model.ImagePath))
                        {
                            <img src="@Html.DisplayFor(model => model.ImagePath)" class="preview inactive" alt="inactive" />
                            <img src="~/Images/x_images.png" class="small-icon delete-icon" />
                        }
                    </div>
                    @foreach (var item in Model.images)
                    {
                        <div class="image-container" data-id-image="@Html.DisplayFor(model => item.IdImage)">
                            <img src="@Html.DisplayFor(model => item.ImagePath)" class="preview inactive" alt="inactive" />
                            <img src="~/Images/x_images.png" class="small-icon delete-icon" />

                        </div>
                    }
                </div>
            </div>
        </div>
        <input type="hidden" id="imagesToRemove" name="imagesToRemove" />

        <div class="hidden">
            @Html.EditorFor(model => model.ImagePath, new { htmlAttributes = new { @class = "form-control" } })
        </div>

        <div class="labelstyle">
            <label>Files</label>
        </div>
   
        <div id="uploaders">
            <input type="file" id="fileToUpload" name="fileUpload" multiple="multiple" style="float: left;" />
            <br />
            <span id="spnFile" style="float: left; color: #FF0000"></span>
            @Html.ValidationMessage("File")
            @Html.Hidden("hdnFileUpload")
        </div>
        <br />
        <br />
        <br />
        <div class="control-section" style="padding: 0px;">
            <div id="selectedFiles"></div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Volver", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
