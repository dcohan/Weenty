@model Cuponera.Entities.offer

@{
    ViewBag.Title = "Editar oferta del producto " + Model.product.Title;
}


<h2>@Model.product.Title</h2>

@Scripts.Render("~/bundles/globalization")
@Scripts.Render("~/bundles/globalization_ar")

<script type="text/javascript">
    var images_to_remove = [];
    var images = [];

    $(function () {
        $('#fileUpload').change(function (e) {
            var files = e.target.files;
            if (!files.length) { return; }

            $('.files-name').empty();
            $(files).each(function (k, v) {
                $('.files-name').append(
                    $('<div></div>').html(v.name)
                );
            });
        });

        $('.image-container').click(function () {
            $('.image-container').removeClass('selected');
            $(this).addClass('selected');

            var id_image = $(this).data('id-image');
            $(images).each(function (k, v) {
                if (v.id_image == id_image) {
                    $('#ImagePath').attr('value', v.url);
                }
            });
        });

        $('.delete-icon').click(function () {
            var $container = $(this).closest('.image-container');
            var id_image = $container.data('id-image');
            images_to_remove.push(id_image);

            var selected_image_path = $('#ImagePath').val();
            $(images).each(function (k, v) {
                if (v.id_image == id_image && selected_image_path == v.url) {
                    $('#ImagePath').attr('value', '');
                }
            });

            $container.remove();
            $('#imagesToRemove').val(images_to_remove.join(','));
        });

        $.validator.methods.date = function (value, element) {
                Globalize.culture("es-AR");
                // you can alternatively pass the culture to parseDate instead of
                // setting the culture above, like so:
                // parseDate(value, null, "en-AU")
                return this.optional(element) || Globalize.parseDate(value) !== null;
        }

        $(".date-picker").removeClass('input-validation-error');
        $(".date-picker").datepicker({
            dateFormat: "dd/mm/yy"
        });

        document.getElementsByClassName('hidden');
        $(".hidden").removeClass('input-validation-error');

    });
</script>

@using (Html.BeginForm("Edit", "offer", FormMethod.Post, new { enctype = "multipart/form-data", id = "frmID" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Oferta</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.IdOffer)

        <div class="form-group">
          @Html.LabelFor(model => model.Title, "Nombre *", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, "Descripción *", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, "Precio ($) *", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.StartDatetime, "Fecha Inicio *", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDatetime, new { htmlAttributes = new { @class = "form-control, date-picker" } })
                @Html.ValidationMessageFor(model => model.StartDatetime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpirationDatetime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExpirationDatetime, new { htmlAttributes = new { @class = "form-control, date-picker" } })
                @Html.ValidationMessage("Date")
                @Html.ValidationMessageFor(model => model.ExpirationDatetime, "", new { @class = "text-danger" })
            </div>
        </div>

      
        <div class="form-group">
            <div class="col-md-10">
                <label class="control-label col-md-2" for="">Imágenes</label>
                <span>@(Model.images.Count() == 0 && string.IsNullOrEmpty(Model.ImagePath) ? "No hay imágenes cargadas." : "")</span>
                <div class="images-container">
                    @if (!string.IsNullOrEmpty(Model.ImagePath))
                    {
                        <div class="image-container selected" data-id-image="main">
                            <div class="image-container-content">

                                <script type="text/javascript">
                                    images.push({
                                        id_image: 'main',
                                        url: "@Model.ImagePath"
                                    });
                                </script>
                                <img src="@Html.DisplayFor(model => model.ImagePath)" class="preview inactive" alt="Portada" />
                                <img src="~/Images/x_images.png" class="small-icon delete-icon" />
                            </div>
                        </div>
                    }
                    @foreach (var item in Model.images)
                    {
                        <script type="text/javascript">
                            images.push({
                                id_image: @item.IdImage,
                                url: "@item.ImagePath"
                            });
                        </script>
                        <div class="image-container" data-id-image="@Html.DisplayFor(model => item.IdImage)">
                            <div class="image-container-content">
                                <img src="@Html.DisplayFor(model => item.ImagePath)" class="preview inactive" alt="Imagen" />
                                <img src="~/Images/x_images.png" class="small-icon delete-icon" />

                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <input type="file" id="fileUpload" name="fileUpload" multiple="multiple" />
            </div>

            Las imágenes seleccionadas son:
            <div class="files-name">

            </div>
        </div>

        <br />

        <div class="hidden">
            <input type="hidden" id="imagesToRemove" name="imagesToRemove" />
            @Html.EditorFor(model => model.ImagePath, new { htmlAttributes = new { @class = "form-control" } })
            @Html.EditorFor(model => model.IdProduct, new { htmlAttributes = new { @class = "form-control" } })
        </div>

        

        @Html.ValidationMessage("ServerValidations")
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Volver", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
