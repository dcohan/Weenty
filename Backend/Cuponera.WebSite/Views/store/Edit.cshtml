@model Cuponera.Entities.store

@{
    ViewBag.Title = "Editar " + Model.Name;
}

<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js"></script>
@Scripts.Render("~/bundles/googlemaps")
@Scripts.Render("~/bundles/ValidateEnabledObjectHierachy")

<script type="text/javascript">
    function drawMarkerCallback(lat, lng) {
        $('#latitude').val(lat);
        $('#longitude').val(lng);
    }

    var images_to_remove = [];
    var images = [];

    $(function () {
        AddWarningOnInactiveObjects("IdCompany", "store", "companyInactive");

        $('#fileUpload').change(function(e){
            var files = e.target.files;
            if (!files.length) { return; }

            $('.files-name').empty();
            $(files).each(function(k, v){
                $('.files-name').append(
                    $('<div></div>').html(v.name)
                );
            });
        });

        $('.image-container').click(function () {
            $('.image-container').removeClass('selected');
            $(this).addClass('selected');

            var id_image = $(this).data('id-image');
            $(images).each(function(k,v){
                if (v.id_image == id_image) {
                    $('#ImagePath').attr('value', v.url);
                }
            });
        });

        $('.delete-icon').click(function () {
            var $container = $(this).closest('.image-container');
            var id_image = $container.data('id-image');
            images_to_remove.push(id_image);

            var selected_image_path = $('#ImagePath').val();
            $(images).each(function(k, v){
                if (v.id_image == id_image && selected_image_path == v.url) {
                    $('#ImagePath').attr('value', '');
                }
            });

            $container.remove();
            $('#imagesToRemove').val(images_to_remove.join(','));
        });

        var map = maps.initialize({
            editable: true
        });

        map.setCenter(@ViewBag.Latitude, @ViewBag.Longitude);
        map.drawMarker(@ViewBag.Latitude, @ViewBag.Longitude);
        map.setZoom(16);

        geocoder = geocoder.initialize(map);

        $('#search').click(function () {
            geocoder.checkIfUserCanAskForCoordinates({
                done: function () {
                    var address = $('#address').val();
                    var selected_state_id = $('#IdState').val();
                    var city = $('#IdState').find('option[value=' + selected_state_id + ']').html();
                    var province = 'Buenos Aires';
                    var country = 'Argentina';
                    geocoder.getCoordinatesByAddress(address, city, province, country);
                }
            });
        });
    });
</script>


<h2>@Html.DisplayFor(model => model.Name)</h2>

@using (Html.BeginForm("Edit", "store", FormMethod.Post, new { enctype = "multipart/form-data", id = "frmID" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Sucursal</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.IdStore)


        <div class="form-group">
            @Html.LabelFor(model => model.Name, "Nombre *", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, "Descripción * ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            <div class="form-group">
                @Html.LabelFor(model => model.IdCategory, "Categoría *", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("IdCategory", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IdCategory, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="categoryInactive" class="advertisement hidden">
                Atención: la categoría elegida está desactivada.
            </div>
        </div>

        <div>
            <div class="form-group">
                @Html.LabelFor(model => model.IdCompany, "Compañia *", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("IdCompany", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IdCompany, "", new { @class = "text-danger" })
                    
                </div>
            </div>

            <div id="companyInactive" class="advertisement">
                Atención: la empresa elegida está desactivada.
            </div>

        </div>


        <br />

        <div class="form-group">
            @Html.LabelFor(model => model.ContactNumber, "Teléfono de contacto", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContactNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContactNumber, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Address, "Dirección *", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @id = "address", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            <div class="form-group">
                @Html.LabelFor(model => model.IdState, "Localidad *", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("IdState", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IdState, "", new { @class = "text-danger" })
                </div>
            </div>


            <div id="stateInactive" class="advertisement hidden">
                Atención: la ciudad elegida está desactivada.
            </div>

        </div>


        <div class="form-group">
            <input type="button" id="search" value="Ubicar dirección" />
        </div>


        <div class="float-left map" id="googleMap"></div>

        <div class="advertisement float-left">
        </div>
        @Html.HiddenFor(model => model.Latitude, htmlAttributes: new { @id = "latitude" })
        @Html.HiddenFor(model => model.Longitude, htmlAttributes: new { @id = "longitude" })

        <div style="clear:both;"></div>
        <span class="text-danger field-validation-valid" id="validation_coordinates">
            <span id="location-error" class="">
                Debe ingresar las coordenadas.
            </span>
        </span>

        <span class="text-danger field-validation-valid" id="validation_coordinates"><span id="location-error" class="">Debe ingresar las coordenadas.</span></span>

        <div class="form-group">
            @Html.LabelFor(model => model.ZipCode, "Código postal", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.StoreHours, "Horarios de trabajo", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.StoreHours, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StoreHours, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, "Email", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WebPage, "Página Web", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WebPage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.WebPage, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.FacebookUrl, "Facebook URL", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FacebookUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FacebookUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WhatsApp, "Whats App", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WhatsApp, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.WhatsApp, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-10">
                <label class="control-label col-md-2" for="">Imágenes</label>
                <span>@(Model.images.Count() == 0 && string.IsNullOrEmpty(Model.ImagePath) ? "No hay imágenes cargadas." : "")</span>
                <div class="images-container">
                    @if (!string.IsNullOrEmpty(Model.ImagePath))
                    {
                        <div class="image-container selected" data-id-image="main">
                            <div class="image-container-content">

                                <script type="text/javascript">
                                    images.push({
                                        id_image: 'main',
                                        url: "@Model.ImagePath"
                                    });
                                </script>
                                <img src="@Html.DisplayFor(model => model.ImagePath)" class="preview inactive" alt="Portada" />
                                <img src="~/Images/x_images.png" class="small-icon delete-icon" />
                            </div>
                        </div>
                    }
                    @foreach (var item in Model.images)
                    {
                        <script type="text/javascript">
                            images.push({
                                id_image: @item.IdImage,
                                url: "@item.ImagePath"
                            });
                        </script>
                        <div class="image-container" data-id-image="@Html.DisplayFor(model => item.IdImage)">
                            <div class="image-container-content">
                                <img src="@Html.DisplayFor(model => item.ImagePath)" class="preview inactive" alt="Imagen" />
                                <img src="~/Images/x_images.png" class="small-icon delete-icon" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
 
        <div class="hidden">
            <input type="hidden" id="imagesToRemove" name="imagesToRemove" />
            @Html.EditorFor(model => model.ImagePath, new { htmlAttributes = new { @class = "form-control" } })
        </div>
       
         <div class="form-group">
            <div class="col-md-10">
                <input type="file" id="fileUpload" name="fileUpload" multiple="multiple" />
            </div>

            Las imágenes seleccionadas son:
            <div class="files-name">

            </div>
        </div>

        <br />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Volver", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
